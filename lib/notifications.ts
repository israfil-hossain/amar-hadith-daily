import { supabase } from './supabase'

export interface NotificationData {
  title: string
  message: string
  type: 'daily_hadith' | 'prayer_reminder' | 'achievement' | 'special_occasion' | 'streak_reminder'
  userId: string
  metadata?: any
}

export interface EmailTemplate {
  subject: string
  html: string
  text: string
}

// Send email notification
export const sendEmailNotification = async (
  to: string,
  template: EmailTemplate
): Promise<boolean> => {
  try {
    // In a real app, you would use a service like SendGrid, Mailgun, or AWS SES
    // For now, we'll simulate the email sending
    console.log('Sending email to:', to)
    console.log('Subject:', template.subject)
    console.log('Content:', template.text)
    
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 1000))
    
    return true
  } catch (error) {
    console.error('Error sending email:', error)
    return false
  }
}

// Create daily hadith email template
export const createDailyHadithEmailTemplate = (
  userName: string,
  hadithList: any[]
): EmailTemplate => {
  const hadithHtml = hadithList.map(hadith => `
    <div style="margin-bottom: 30px; padding: 20px; border-left: 4px solid #10B981; background-color: #f8fafc;">
      <h3 style="color: #10B981; margin-bottom: 10px;">рж╣рж╛ржжрж┐рж╕ ржиржВ ${hadith.hadith_number}</h3>
      <p style="font-size: 18px; line-height: 1.6; margin-bottom: 15px; direction: rtl; text-align: right;">
        ${hadith.text_arabic || hadith.arabic}
      </p>
      <p style="font-size: 16px; line-height: 1.6; margin-bottom: 10px;">
        <strong>ржмрж╛ржВрж▓рж╛:</strong> ${hadith.text_bangla || hadith.bangla}
      </p>
      <p style="font-size: 14px; color: #6b7280; margin-bottom: 5px;">
        <strong>ржмрж░рзНржгржирж╛ржХрж╛рж░рзА:</strong> ${hadith.narrator}
      </p>
      <p style="font-size: 14px; color: #6b7280;">
        <strong>рж╕рзВрждрзНрж░:</strong> ${hadith.reference}
      </p>
    </div>
  `).join('')

  const html = `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="utf-8">
      <title>ржЖржЬржХрзЗрж░ рж╣рж╛ржжрж┐рж╕ - ржЖржорж╛рж░ рж╣рж╛ржжрж┐рж╕</title>
    </head>
    <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px;">
      <div style="text-align: center; margin-bottom: 30px;">
        <h1 style="color: #10B981; margin-bottom: 10px;">ржЖржорж╛рж░ рж╣рж╛ржжрж┐рж╕</h1>
        <p style="color: #6b7280;">ржЖржЬржХрзЗрж░ ржжрзИржирж┐ржХ рж╣рж╛ржжрж┐рж╕</p>
      </div>
      
      <div style="margin-bottom: 20px;">
        <p>ржЖрж╕рж╕рж╛рж▓рж╛ржорзБ ржЖрж▓рж╛ржЗржХрзБржо ${userName},</p>
        <p>ржЖржЬржХрзЗрж░ ржЬржирзНржп ржирж┐рж░рзНржмрж╛ржЪрж┐ржд рж╣рж╛ржжрж┐рж╕ржЧрзБрж▓рзЛ ржирж┐ржЪрзЗ ржжрзЗржУржпрж╝рж╛ рж╣рж▓рзЛ:</p>
      </div>
      
      ${hadithHtml}
      
      <div style="margin-top: 40px; padding: 20px; background-color: #f3f4f6; border-radius: 8px; text-align: center;">
        <p style="margin-bottom: 15px;">рж╣рж╛ржжрж┐рж╕ ржкржбрж╝рж╛рж░ ржкрж░ ржЖржорж╛ржжрзЗрж░ ржУржпрж╝рзЗржмрж╕рж╛ржЗржЯрзЗ ржЧрж┐ржпрж╝рзЗ ржЪрж┐рж╣рзНржирж┐ржд ржХрж░рзБржи</p>
        <a href="${process.env.NEXT_PUBLIC_APP_URL}" style="display: inline-block; background-color: #10B981; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px;">ржУржпрж╝рзЗржмрж╕рж╛ржЗржЯ ржнрж┐ржЬрж┐ржЯ ржХрж░рзБржи</a>
      </div>
      
      <div style="margin-top: 30px; text-align: center; color: #6b7280; font-size: 12px;">
        <p>ржЖржорж╛рж░ рж╣рж╛ржжрж┐рж╕ - ржкрзНрж░рждрж┐ржжрж┐ржи ржЗрж╕рж▓рж╛ржорзА ржЬрзНржЮрж╛ржи ржЕрж░рзНржЬржи ржХрж░рзБржи</p>
        <p>ржПржЗ ржЗржорзЗржЗрж▓ ржкрзЗрждрзЗ ржирж╛ ржЪрж╛ржЗрж▓рзЗ <a href="${process.env.NEXT_PUBLIC_APP_URL}/unsubscribe">ржЖржирж╕рж╛ржмрж╕рзНржХрзНрж░рж╛ржЗржм</a> ржХрж░рзБржи</p>
      </div>
    </body>
    </html>
  `

  const text = `
ржЖрж╕рж╕рж╛рж▓рж╛ржорзБ ржЖрж▓рж╛ржЗржХрзБржо ${userName},

ржЖржЬржХрзЗрж░ ржЬржирзНржп ржирж┐рж░рзНржмрж╛ржЪрж┐ржд рж╣рж╛ржжрж┐рж╕ржЧрзБрж▓рзЛ:

${hadithList.map((hadith, index) => `
${index + 1}. рж╣рж╛ржжрж┐рж╕ ржиржВ ${hadith.hadith_number}
ржЖрж░ржмрж┐: ${hadith.text_arabic || hadith.arabic}
ржмрж╛ржВрж▓рж╛: ${hadith.text_bangla || hadith.bangla}
ржмрж░рзНржгржирж╛ржХрж╛рж░рзА: ${hadith.narrator}
рж╕рзВрждрзНрж░: ${hadith.reference}
`).join('\n')}

рж╣рж╛ржжрж┐рж╕ ржкржбрж╝рж╛рж░ ржкрж░ ржЖржорж╛ржжрзЗрж░ ржУржпрж╝рзЗржмрж╕рж╛ржЗржЯрзЗ ржЧрж┐ржпрж╝рзЗ ржЪрж┐рж╣рзНржирж┐ржд ржХрж░рзБржи: ${process.env.NEXT_PUBLIC_APP_URL}

ржЖржорж╛рж░ рж╣рж╛ржжрж┐рж╕ - ржкрзНрж░рждрж┐ржжрж┐ржи ржЗрж╕рж▓рж╛ржорзА ржЬрзНржЮрж╛ржи ржЕрж░рзНржЬржи ржХрж░рзБржи
  `

  return {
    subject: `ржЖржЬржХрзЗрж░ рж╣рж╛ржжрж┐рж╕ - ${new Date().toLocaleDateString('bn-BD')}`,
    html,
    text
  }
}

// Create achievement notification template
export const createAchievementEmailTemplate = (
  userName: string,
  achievement: any
): EmailTemplate => {
  const html = `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="utf-8">
      <title>ржирждрзБржи ржЕрж░рзНржЬржи - ржЖржорж╛рж░ рж╣рж╛ржжрж┐рж╕</title>
    </head>
    <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px;">
      <div style="text-align: center; margin-bottom: 30px;">
        <h1 style="color: #10B981; margin-bottom: 10px;">ЁЯОЙ ржЕржнрж┐ржиржирзНржжржи!</h1>
        <p style="color: #6b7280;">ржЖржкржирж┐ ржПржХржЯрж┐ ржирждрзБржи ржЕрж░рзНржЬржи ржЖржирж▓ржХ ржХрж░рзЗржЫрзЗржи</p>
      </div>
      
      <div style="text-align: center; margin-bottom: 30px; padding: 30px; background: linear-gradient(135deg, #10B981, #3B82F6); border-radius: 12px; color: white;">
        <div style="font-size: 48px; margin-bottom: 15px;">${achievement.icon}</div>
        <h2 style="margin-bottom: 10px; color: white;">${achievement.name_bangla}</h2>
        <p style="margin-bottom: 15px; opacity: 0.9;">${achievement.description_bangla}</p>
        <div style="background: rgba(255,255,255,0.2); padding: 8px 16px; border-radius: 20px; display: inline-block;">
          тнР ${achievement.points_reward} ржкржпрж╝рзЗржирзНржЯ ржЕрж░рзНржЬрж┐ржд
        </div>
      </div>
      
      <div style="margin-bottom: 20px;">
        <p>ржкрзНрж░рж┐ржпрж╝ ${userName},</p>
        <p>ржЖржкржирж╛рж░ ржЗрж╕рж▓рж╛ржорзА ржЬрзНржЮрж╛ржи ржЕрж░рзНржЬржирзЗрж░ ржпрж╛рждрзНрж░рж╛ржпрж╝ ржПржЗ ржорж╛ржЗрж▓ржлрж▓ржХ ржЕрж░рзНржЬржирзЗрж░ ржЬржирзНржп ржЕржнрж┐ржиржирзНржжржи! ржЖржкржирж╛рж░ ржирж┐ржпрж╝ржорж┐ржд рж╣рж╛ржжрж┐рж╕ ржкржбрж╝рж╛рж░ ржЕржнрзНржпрж╛рж╕ рж╕рждрзНржпрж┐ржЗ ржкрзНрж░рж╢ржВрж╕ржирзАржпрж╝ред</p>
      </div>
      
      <div style="margin-top: 40px; padding: 20px; background-color: #f3f4f6; border-radius: 8px; text-align: center;">
        <p style="margin-bottom: 15px;">ржЖрж░ржУ ржЕрж░рзНржЬржи ржжрзЗржЦрзБржи ржПржмржВ ржЖржкржирж╛рж░ ржЕржЧрзНрж░ржЧрждрж┐ ржЯрзНрж░рзНржпрж╛ржХ ржХрж░рзБржи</p>
        <a href="${process.env.NEXT_PUBLIC_APP_URL}/achievements" style="display: inline-block; background-color: #10B981; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px;">ржЕрж░рзНржЬржирж╕ржорзВрж╣ ржжрзЗржЦрзБржи</a>
      </div>
    </body>
    </html>
  `

  const text = `
ЁЯОЙ ржЕржнрж┐ржиржирзНржжржи ${userName}!

ржЖржкржирж┐ ржПржХржЯрж┐ ржирждрзБржи ржЕрж░рзНржЬржи ржЖржирж▓ржХ ржХрж░рзЗржЫрзЗржи:

${achievement.icon} ${achievement.name_bangla}
${achievement.description_bangla}
тнР ${achievement.points_reward} ржкржпрж╝рзЗржирзНржЯ ржЕрж░рзНржЬрж┐ржд

ржЖржкржирж╛рж░ ржЗрж╕рж▓рж╛ржорзА ржЬрзНржЮрж╛ржи ржЕрж░рзНржЬржирзЗрж░ ржпрж╛рждрзНрж░рж╛ржпрж╝ ржПржЗ ржорж╛ржЗрж▓ржлрж▓ржХ ржЕрж░рзНржЬржирзЗрж░ ржЬржирзНржп ржЕржнрж┐ржиржирзНржжржи!

ржЖрж░ржУ ржЕрж░рзНржЬржи ржжрзЗржЦрзБржи: ${process.env.NEXT_PUBLIC_APP_URL}/achievements
  `

  return {
    subject: `ЁЯОЙ ржирждрзБржи ржЕрж░рзНржЬржи: ${achievement.name_bangla}`,
    html,
    text
  }
}

// Create prayer reminder template
export const createPrayerReminderTemplate = (
  userName: string,
  prayerName: string,
  prayerTime: string
): EmailTemplate => {
  const html = `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="utf-8">
      <title>ржирж╛ржорж╛ржЬрзЗрж░ рж╕ржоржпрж╝ - ржЖржорж╛рж░ рж╣рж╛ржжрж┐рж╕</title>
    </head>
    <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px;">
      <div style="text-align: center; margin-bottom: 30px;">
        <h1 style="color: #10B981; margin-bottom: 10px;">ЁЯХМ ржирж╛ржорж╛ржЬрзЗрж░ рж╕ржоржпрж╝</h1>
        <p style="color: #6b7280;">${prayerName} ржирж╛ржорж╛ржЬрзЗрж░ рж╕ржоржпрж╝ рж╣ржпрж╝рзЗржЫрзЗ</p>
      </div>
      
      <div style="text-align: center; margin-bottom: 30px; padding: 30px; background: linear-gradient(135deg, #10B981, #3B82F6); border-radius: 12px; color: white;">
        <div style="font-size: 48px; margin-bottom: 15px;">ЁЯХМ</div>
        <h2 style="margin-bottom: 10px; color: white;">${prayerName}</h2>
        <p style="margin-bottom: 0; font-size: 18px; opacity: 0.9;">рж╕ржоржпрж╝: ${prayerTime}</p>
      </div>
      
      <div style="margin-bottom: 20px;">
        <p>ржкрзНрж░рж┐ржпрж╝ ${userName},</p>
        <p>${prayerName} ржирж╛ржорж╛ржЬрзЗрж░ рж╕ржоржпрж╝ рж╣ржпрж╝рзЗржЫрзЗред ржЖрж▓рзНрж▓рж╛рж╣рж░ рж╕рж╛ржерзЗ рж╕ржВржпрзЛржЧ рж╕рзНржерж╛ржкржирзЗрж░ ржПржЗ ржкржмрж┐рждрзНрж░ ржорзБрж╣рзВрж░рзНрждржЯрж┐ рж╣рж╛рждржЫрж╛ржбрж╝рж╛ ржХрж░ржмрзЗржи ржирж╛ред</p>
      </div>
      
      <div style="margin-top: 40px; padding: 20px; background-color: #f3f4f6; border-radius: 8px;">
        <p style="margin-bottom: 10px; font-weight: bold;">ржирж╛ржорж╛ржЬрзЗрж░ ржлржЬрж┐рж▓ржд:</p>
        <p style="margin-bottom: 0; font-style: italic;">"ржирж┐рж╢рзНржЪржпрж╝ржЗ ржирж╛ржорж╛ржЬ ржорзБржорж┐ржиржжрзЗрж░ ржЙржкрж░ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ рж╕ржоржпрж╝рзЗ ржлрж░ржЬред" - рж╕рзВрж░рж╛ ржирж┐рж╕рж╛: рззрзжрзй</p>
      </div>
    </body>
    </html>
  `

  const text = `
ЁЯХМ ржирж╛ржорж╛ржЬрзЗрж░ рж╕ржоржпрж╝

ржкрзНрж░рж┐ржпрж╝ ${userName},

${prayerName} ржирж╛ржорж╛ржЬрзЗрж░ рж╕ржоржпрж╝ рж╣ржпрж╝рзЗржЫрзЗ (${prayerTime})ред

ржЖрж▓рзНрж▓рж╛рж╣рж░ рж╕рж╛ржерзЗ рж╕ржВржпрзЛржЧ рж╕рзНржерж╛ржкржирзЗрж░ ржПржЗ ржкржмрж┐рждрзНрж░ ржорзБрж╣рзВрж░рзНрждржЯрж┐ рж╣рж╛рждржЫрж╛ржбрж╝рж╛ ржХрж░ржмрзЗржи ржирж╛ред

"ржирж┐рж╢рзНржЪржпрж╝ржЗ ржирж╛ржорж╛ржЬ ржорзБржорж┐ржиржжрзЗрж░ ржЙржкрж░ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ рж╕ржоржпрж╝рзЗ ржлрж░ржЬред" - рж╕рзВрж░рж╛ ржирж┐рж╕рж╛: рззрзжрзй
  `

  return {
    subject: `ЁЯХМ ${prayerName} ржирж╛ржорж╛ржЬрзЗрж░ рж╕ржоржпрж╝`,
    html,
    text
  }
}

// Send daily hadith emails to all subscribed users
export const sendDailyHadithEmails = async () => {
  try {
    // Get all users who want daily emails
    const { data: users, error: usersError } = await supabase
      .from('profiles')
      .select('id, email, full_name, email_notifications')
      .eq('email_notifications', true)

    if (usersError || !users) {
      console.error('Error fetching users:', usersError)
      return
    }

    // Get today's hadith
    const { getDailyHadith } = await import('./supabase')
    const { data: hadithList, error: hadithError } = await getDailyHadith()

    if (hadithError || !hadithList) {
      console.error('Error fetching daily hadith:', hadithError)
      return
    }

    // Send emails to all users
    for (const user of users) {
      const template = createDailyHadithEmailTemplate(
        user.full_name || 'ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА',
        hadithList
      )

      await sendEmailNotification(user.email, template)
      
      // Add small delay to avoid rate limiting
      await new Promise(resolve => setTimeout(resolve, 100))
    }

    console.log(`Daily hadith emails sent to ${users.length} users`)
  } catch (error) {
    console.error('Error sending daily hadith emails:', error)
  }
}

// Schedule notifications (this would typically run as a cron job)
export const scheduleNotifications = () => {
  // Send daily hadith emails at 6 AM
  const sendDailyEmails = () => {
    const now = new Date()
    if (now.getHours() === 6 && now.getMinutes() === 0) {
      sendDailyHadithEmails()
    }
  }

  // Check every minute
  setInterval(sendDailyEmails, 60 * 1000)
}
