import { createClient } from '@supabase/supabase-js'
import { readFileSync } from 'fs'
import { join } from 'path'

// Load environment variables
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('тЭМ Missing environment variables:')
  console.error('- NEXT_PUBLIC_SUPABASE_URL')
  console.error('- SUPABASE_SERVICE_ROLE_KEY')
  process.exit(1)
}

// Create Supabase client with service role key
const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
})

async function setupDatabase() {
  try {
    console.log('ЁЯЪА Starting database setup...')

    // Read SQL files
    const createTablesSQL = readFileSync(
      join(process.cwd(), 'database', 'create-tables.sql'),
      'utf-8'
    )
    
    const insertDataSQL = readFileSync(
      join(process.cwd(), 'database', 'insert-sample-data.sql'),
      'utf-8'
    )

    console.log('ЁЯУЛ Creating tables...')
    
    // Execute create tables SQL
    const { error: createError } = await supabase.rpc('exec_sql', {
      sql: createTablesSQL
    })

    if (createError) {
      console.error('тЭМ Error creating tables:', createError)
      
      // Try alternative method - execute queries one by one
      console.log('ЁЯФД Trying alternative method...')
      
      const queries = createTablesSQL
        .split(';')
        .map(q => q.trim())
        .filter(q => q.length > 0)

      for (const query of queries) {
        if (query.includes('CREATE TABLE') || query.includes('CREATE INDEX') || query.includes('ALTER TABLE') || query.includes('CREATE POLICY')) {
          try {
            const { error } = await supabase.rpc('exec_sql', { sql: query })
            if (error && !error.message.includes('already exists')) {
              console.warn('тЪая╕П Query warning:', error.message)
            }
          } catch (err) {
            console.warn('тЪая╕П Query failed:', query.substring(0, 50) + '...')
          }
        }
      }
    } else {
      console.log('тЬЕ Tables created successfully')
    }

    console.log('ЁЯУК Inserting sample data...')
    
    // Execute insert data SQL
    const { error: insertError } = await supabase.rpc('exec_sql', {
      sql: insertDataSQL
    })

    if (insertError) {
      console.error('тЭМ Error inserting data:', insertError)
      
      // Try inserting data manually
      console.log('ЁЯФД Trying manual data insertion...')
      
      // Insert books
      const { data: booksData, error: booksError } = await supabase
        .from('hadith_books')
        .upsert([
          {
            name_bangla: 'рж╕рж╣рзАрж╣ ржмрзБржЦрж╛рж░рзА',
            name_arabic: '╪╡╪н┘К╪н ╪з┘Д╪и╪о╪з╪▒┘К',
            name_english: 'Sahih Bukhari',
            author_bangla: 'ржЗржорж╛ржо ржмрзБржЦрж╛рж░рзА',
            total_hadith: 7563,
            display_order: 1
          },
          {
            name_bangla: 'рж╕рж╣рзАрж╣ ржорзБрж╕рж▓рж┐ржо',
            name_arabic: '╪╡╪н┘К╪н ┘Е╪│┘Д┘Е',
            name_english: 'Sahih Muslim',
            author_bangla: 'ржЗржорж╛ржо ржорзБрж╕рж▓рж┐ржо',
            total_hadith: 7470,
            display_order: 2
          }
        ])
        .select()

      if (booksError) {
        console.warn('тЪая╕П Books insertion warning:', booksError.message)
      }

      // Insert categories
      const { data: categoriesData, error: categoriesError } = await supabase
        .from('hadith_categories')
        .upsert([
          {
            name_bangla: 'ржИржорж╛ржи',
            name_arabic: '╪з┘Д╪е┘К┘Е╪з┘Ж',
            name_english: 'Faith',
            display_order: 1
          },
          {
            name_bangla: 'ржЖржЦрж▓рж╛ржХ',
            name_arabic: '╪з┘Д╪г╪о┘Д╪з┘В',
            name_english: 'Morality',
            display_order: 6
          }
        ])
        .select()

      if (categoriesError) {
        console.warn('тЪая╕П Categories insertion warning:', categoriesError.message)
      }

      // Get book and category IDs
      const bukhari = booksData?.find(b => b.name_bangla === 'рж╕рж╣рзАрж╣ ржмрзБржЦрж╛рж░рзА')
      const faithCategory = categoriesData?.find(c => c.name_bangla === 'ржИржорж╛ржи')
      const moralityCategory = categoriesData?.find(c => c.name_bangla === 'ржЖржЦрж▓рж╛ржХ')

      if (bukhari && faithCategory && moralityCategory) {
        // Insert hadith
        const { error: hadithError } = await supabase
          .from('hadith')
          .upsert([
            {
              id: 'fallback-1',
              hadith_number: 'рзз',
              text_bangla: 'ржирж┐ржпрж╝рждрзЗрж░ ржЙржкрж░ ржЖржорж▓ ржирж┐рж░рзНржнрж░рж╢рзАрж▓ред ржкрзНрж░рждрзНржпрзЗржХ ржмрзНржпржХрзНрждрж┐ ржпрж╛ ржирж┐ржпрж╝ржд ржХрж░рзЗ рждрж╛ржЗ ржкрж╛ржпрж╝ред',
              text_arabic: '╪е┘Р┘Ж┘О┘С┘Е┘О╪з ╪з┘Д┘Т╪г┘О╪╣┘Т┘Е┘О╪з┘Д┘П ╪и┘Р╪з┘Д┘Ж┘Р┘С┘К┘О┘С╪з╪к┘Р ┘И┘О╪е┘Р┘Ж┘О┘С┘Е┘О╪з ┘Д┘Р┘Г┘П┘Д┘Р┘С ╪з┘Е┘Т╪▒┘Р╪ж┘Н ┘Е┘О╪з ┘Ж┘О┘И┘О┘Й',
              narrator: 'ржЙржорж░ ржЗржмржирзБрж▓ ржЦрж╛рждрзНрждрж╛ржм (рж░рж╛.)',
              book_id: bukhari.id,
              category_id: faithCategory.id,
              chapter_bangla: 'ржирж┐ржпрж╝рждрзЗрж░ ржЧрзБрж░рзБрждрзНржм',
              status: 'verified'
            },
            {
              id: 'fallback-2',
              hadith_number: 'рзи',
              text_bangla: 'ржорзБрж╕рж▓ржорж╛ржи рж╕рзЗ, ржпрж╛рж░ рж╣рж╛ржд ржУ ржорзБржЦ ржерзЗржХрзЗ ржЕржирзНржп ржорзБрж╕рж▓ржорж╛ржи ржирж┐рж░рж╛ржкржж ржерж╛ржХрзЗред',
              text_arabic: '╪з┘Д┘Т┘Е┘П╪│┘Т┘Д┘Р┘Е┘П ┘Е┘О┘Ж┘Т ╪│┘О┘Д┘Р┘Е┘О ╪з┘Д┘Т┘Е┘П╪│┘Т┘Д┘Р┘Е┘П┘И┘Ж┘О ┘Е┘Р┘Ж┘Т ┘Д┘Р╪│┘О╪з┘Ж┘Р┘З┘Р ┘И┘О┘К┘О╪п┘Р┘З┘Р',
              narrator: 'ржЖржмржжрзБрж▓рзНрж▓рж╛рж╣ ржЗржмржирзЗ ржЖржорж░ (рж░рж╛.)',
              book_id: bukhari.id,
              category_id: moralityCategory.id,
              chapter_bangla: 'ржорзБрж╕рж▓ржорж╛ржирзЗрж░ ржкрж░рж┐ржЪржпрж╝',
              status: 'verified'
            },
            {
              id: 'fallback-3',
              hadith_number: 'рзй',
              text_bangla: 'ржпрзЗ ржмрзНржпржХрзНрждрж┐ ржЖрж▓рзНрж▓рж╛рж╣ ржУ ржкрж░ржХрж╛рж▓рзЗрж░ ржкрзНрж░рждрж┐ ржИржорж╛ржи рж░рж╛ржЦрзЗ, рж╕рзЗ ржпрзЗржи ржнрж╛рж▓рзЛ ржХржерж╛ ржмрж▓рзЗ ржЕржержмрж╛ ржЪрзБржк ржерж╛ржХрзЗред',
              text_arabic: '┘Е┘О┘Ж┘Т ┘Г┘О╪з┘Ж┘О ┘К┘П╪д┘Т┘Е┘Р┘Ж┘П ╪и┘Р╪з┘Д┘Д┘О┘С┘З┘Р ┘И┘О╪з┘Д┘Т┘К┘О┘И┘Т┘Е┘Р ╪з┘Д┘Т╪в╪о┘Р╪▒┘Р ┘Б┘О┘Д┘Т┘К┘О┘В┘П┘Д┘Т ╪о┘О┘К┘Т╪▒┘Л╪з ╪г┘О┘И┘Т ┘Д┘Р┘К┘О╪╡┘Т┘Е┘П╪к┘Т',
              narrator: 'ржЖржмрзБ рж╣рзБрж░рж╛ржпрж╝рж░рж╛ (рж░рж╛.)',
              book_id: bukhari.id,
              category_id: moralityCategory.id,
              chapter_bangla: 'ржХржерж╛ржмрж╛рж░рзНрждрж╛рж░ ржЖржжржм',
              status: 'verified'
            }
          ])

        if (hadithError) {
          console.warn('тЪая╕П Hadith insertion warning:', hadithError.message)
        }
      }

      if (hadithError) {
        console.warn('тЪая╕П Hadith insertion warning:', hadithError.message)
      }

      // Insert daily schedule
      const today = new Date().toISOString().split('T')[0]
      const { error: scheduleError } = await supabase
        .from('daily_hadith_schedule')
        .upsert({
          date: today,
          hadith_ids: ['fallback-1', 'fallback-2', 'fallback-3']
        })

      if (scheduleError) {
        console.warn('тЪая╕П Schedule insertion warning:', scheduleError.message)
      }

    } else {
      console.log('тЬЕ Sample data inserted successfully')
    }

    console.log('ЁЯОЙ Database setup completed!')
    console.log('')
    console.log('ЁЯУЛ Summary:')
    console.log('- Tables created with proper RLS policies')
    console.log('- Sample hadith books and categories added')
    console.log('- 3 fallback hadith inserted')
    console.log('- Daily hadith schedule created for today')
    console.log('')
    console.log('ЁЯЪА You can now run: npm run dev')

  } catch (error) {
    console.error('тЭМ Database setup failed:', error)
    process.exit(1)
  }
}

// Run the setup
setupDatabase()
